{"version":3,"sources":["redux/actions/importData.action.js","redux/actionTypes.js","components/ImportDataStepper.service.js","components/general/StepsGuide.js","components/ImportDataStepper.js","components/general/DataTable.js","components/pages/importData/ImportDataChooseDataFieldsDialog.js","services/logger.js","components/pages/importData/ImportDataTable.service.js","components/general/DataTable.service.js","components/pages/importData/ImportDataTable.js","services/utility/fileReader.js","redux/actions/application.action.js","components/pages/importData/ImportDataInput.service.js","components/pages/importData/ImportDataInput.js","components/general/SimpleRadioGroup.js","components/pages/importData/ImportDataChooseDataFieldsDialog.service.js","redux/actions/setting.action.js","components/pages/importData/ImportData.js","services/fundPerformance.js","services/CAPM.js","services/eventStudy.js","components/pages/result/Result.service.js","components/general/SimpleList.js","components/pages/result/ResultCalendarList.js","components/general/SimpleLineChart.js","components/pages/result/ResultToolbar.js","components/pages/result/Result.js","App.js","serviceWorker.js","redux/reducers/userData.reducer.js","redux/reducers/setting.reducer.js","redux/reducers/application.reducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["importDataActiveStepperSet","index","type","payload","ImportDataStepper_service","step","stepIndex","activeStep","userData","dataStock","length","isValidForMarketPage","dataMarket","isValidForCalendarPage","dataCalendar","isValidForResultPage","AppHeader","_this$props","this","props","getSteps","getStepContent","orientation","steps","onStepClick","react_default","a","createElement","Stepper_default","map","label","Step_default","key","StepButton_default","onClick","StepContent_default","Typography_default","Component","ImportDataStepper","_this","ImportDataStepperService","activeStepper","StepsGuide","history","push","mapDispatchToProps","withRouter","connect","state","userDataReducer","MuiVirtualizedTable","getRowClassName","_ref","classes","rowClassName","onRowClick","classNames","tableRow","flexContainer","Object","defineProperty","tableRowHover","cellRenderer","_ref2","cellData","_ref2$columnIndex","columnIndex","_this$props2","columns","rowHeight","TableCell_default","component","className","tableCell","noClick","variant","style","height","align","numeric","headerRenderer","_ref3","_direction","dataKey","sortBy","sortDirection","_this$props3","headerHeight","sort","direction","SortDirection","ASC","DESC","inner","disableSort","TableSortLabel_default","active","_this2","_this$props4","tableProps","objectWithoutProperties","dist_es","_ref4","width","assign","table","_ref5","renderer","_ref5$cellContentRend","cellContentRenderer","other","cellRendererProps","headerProps","objectSpread","React","PureComponent","defaultProps","dateFormValue","operationFormValue","adapter","WrappedVirtualizedTable","withStyles","theme","fontFamily","typography","display","alignItems","boxSizing","cursor","&:hover","backgroundColor","palette","grey","flex","DataTable","_this3","rowCount","tableRows","rowGetter","_ref6","event","console","log","tableColumns","genColumn","arguments","undefined","ImportDataTable_service","rawData","data","id","item","getRows","keys","isNumber","isNaN","ImportDataTable","tableData","general_DataTable","ImportDataTableService","csv","require","fileToJson","file","Promise","resolve","reject","fileReader","FileReader","readAsText","onload","onerror","then","name","endsWith","fromString","target","result","catch","JSON","parse","showDataFieldsModal","show","ImportDataInput_service","ImportDataInput","handleInputFileChange","files","json","stockDataSet","marketDataSet","calendarDataSet","error","onNextStepClick","dateField","operationField","Toolbar_default","grow","showNextStep","Button_default","color","accept","onChange","htmlFor","activeStepperMax","ImportDataInputService","settingReducer","flexGrow","SimpleRadioGroup","value","defaultValue","handleChange","setState","onValueChange","radios","formLabel","groupName","FormControl_default","formControl","FormLabel_default","RadioGroup_default","aria-label","group","radio","FormControlLabel_default","control","Radio_default","margin","spacing","unit","concat","stringToRadio","s","ImportDataChooseDataFieldsDialog","onDateFormChange","onOperationFormChange","handleClose","dateFieldSet","operationFieldSet","showDataFieldModal","dateForm","genDateForm","operationForm","genOperationForm","Dialog_default","open","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","root","general_SimpleRadioGroup","DialogActions_default","field","applicationReducer","PageResult","Grid_default","xs","importData_ImportDataInput","importData_ImportDataTable","importData_ImportDataChooseDataFieldsDialog","isNotNaN","x","fundPerformance","endValues","v","i","filter","CAPM","CAPMParams","marketReturn","stockReturn","regression","linear","zip","precision","portfolioBeta","assetsAllocation","assetsBeta","weights","sumOfAllocations","sum","values","divideBySum","divide","__","mapObjIndexed","allocationsWeights","reduce","b","eventStudy","stockEstimationWindowReturns","mean","marketReturns","marketReturnsForCAPM","stockReturnsForCAPM","observationMarketReturns","equation","RAR","realStockReturn","normalStockReturn","subtract","apply","toConsumableArray","AR","regressionError","TS","Math","abs","y","meanY","meanX","subtractMeanY","subtractMeanX","square","pow","sumSubMeanYSquare","sumSubMeanXSquare","divideByLength","sqrt","forEach","sumSubtractedMultiSubtractedSquare","indexByDate","indexBy","prop","Result_service","calcReturns","assessingFundPerformance","dates","extractDataCalendar","marketData","getMarketData","stockData","getStockData","cleanMarketData","pick","timeline","_state$settingReducer","T0T1","T1E","ET2","T2T3","getTimeline","windowsPerDate","date","aggregate","findDateIndex","findIndex","propEq","indexStock","indexMarket","indexesStockEstimationWindow","indexesMarketEstimationWindow","indexesStockEventWindow","indexesMarketEventWindow","indexesStockPostEventWindow","indexesMarketPostEventWindow","results","stockEstimationWindow","slice","marketEstimationWindow","stockEventWindow","marketEventWindow","stockPostEventWindow","marketPostEventWindow","originalResult","extractDateWindows","regressionStandardErrors","eventStudyService","eventWindowsNormalReturns","eventWindowsAbnormalReturns","eventWindowStatisticalTests","RT","eventWindowSignificantTests","eventWindowCUMs","resultPerDates","o","Date","RegressionError","eventWindowsNormalReturn","eventWindowsAbnormalReturn","eventWindowStatisticalTest","eventWindowSignificantTest","eventWindowCUM","eventWindowsDates","activeBtn","SimpleList","onItemClick","List_default","items","ListItem_default","button","ListItemText_default","primary","ResultCalendarList","general_SimpleList","activeResultDateSet","SimpleLineChart","lines","omit","es6","top","right","left","bottom","strokeDasharray","line","stroke","ResultToolbar","onToolbarClick","Result","analysed","activeDate","activeResultDate","analysedProp","ResultService","currentDateData","currentDates","toString","container","result_ResultToolbar","justify","result_ResultCalendarList","general_SimpleLineChart","App","react_router_dom","components_ImportDataStepper","react_router","path","exact","ImportData","Boolean","window","location","hostname","match","initialState","selectedEventDate","combineReducers","action","createStore","rootReducer","rootElement","document","getElementById","ReactDOM","render","es","store","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cfb178e5.chunk.js","sourcesContent":["import {\r\n    IMPORT_DATA_ACTIVE_STEPPER_SET,\r\n    STOCK_DATA_SET,\r\n    MARKET_DATA_SET,\r\n    CALENDAR_DATA_SET,\r\n    ACTIVE_RESULT_DATE_SET\r\n} from '../actionTypes'\r\n\r\nexport const importDataActiveStepperSet = index => ({\r\n    type: IMPORT_DATA_ACTIVE_STEPPER_SET,\r\n    payload: {\r\n        index\r\n    }\r\n})\r\n\r\nexport const stockDataSet = data => ({\r\n    type: STOCK_DATA_SET,\r\n    payload: {\r\n        data\r\n    }\r\n})\r\n\r\nexport const marketDataSet = data => ({\r\n    type: MARKET_DATA_SET,\r\n    payload: {\r\n        data\r\n    }\r\n})\r\n\r\nexport const calendarDataSet = data => ({\r\n    type: CALENDAR_DATA_SET,\r\n    payload: {\r\n        data\r\n    }\r\n})\r\n\r\nexport const activeResultDateSet = date => ({\r\n    type: ACTIVE_RESULT_DATE_SET,\r\n    payload: {\r\n        date\r\n    }\r\n})\r\n","// User Data Page\r\nexport const STOCK_DATA_SET = 'STOCK_DATA_SET'\r\nexport const MARKET_DATA_SET = 'MARKET_DATA_SET'\r\nexport const CALENDAR_DATA_SET = 'CALENDAR_DATA_SET'\r\nexport const IMPORT_DATA_ACTIVE_STEPPER_SET = 'IMPORT_DATA_ACTIVE_STEPPER_SET'\r\nexport const ACTIVE_RESULT_DATE_SET = 'ACTIVE_RESULT_DATE_SET'\r\n\r\n// Setting page\r\nexport const SELECTED_EVENT_DATE_SET = 'SELECTED_EVENT_DATE_SET'\r\nexport const TOT1_SET = 'TOT1_SET'\r\nexport const T1E_SET = 'T1E_SET'\r\nexport const ET2_SET = 'ET2_SET'\r\nexport const T2T3_SET = 'T2T3_SET'\r\nexport const DATE_FIELD_SET = 'DATE_FIELD_SET'\r\nexport const OPERATION_FIELD_SET = 'OPERATION_FIELD_SET'\r\n\r\n// Application page\r\nexport const SHOW_DATA_FIELDS_MODAL_SET = 'SHOW_DATA_FIELDS_MODAL_SET'\r\n","const isValidForMarketPage = userData => userData.dataStock.length\r\nconst isValidForCalendarPage = userData => userData.dataMarket.length\r\nconst isValidForResultPage = userData => userData.dataCalendar.length\r\n\r\nexport default {\r\n    getSteps () {\r\n        return [\r\n            'Import Stock data',\r\n            'Import market data',\r\n            'Import Events Calendar',\r\n            'See Results'\r\n        ]\r\n    },\r\n    getStepContent (step) {\r\n        switch (step) {\r\n            case 0:\r\n                return `Stock information should contain enough items to perform analysis.`\r\n            case 1:\r\n                return 'We use Market data to figure out expected stock return.'\r\n            case 2:\r\n                return `Calendar events use for event Time Line.`\r\n            case 3:\r\n                return `Can see many aggregations.`\r\n            default:\r\n                return 'Unknown step'\r\n        }\r\n    },\r\n    isValidToNextStep (stepIndex, activeStep, userData) {\r\n        if (stepIndex === activeStep) return false\r\n        else if (stepIndex === 0) return true\r\n        else if (stepIndex === 1 && isValidForMarketPage(userData)) return true\r\n        else if (stepIndex === 2 && isValidForCalendarPage(userData)) return true\r\n        else return (stepIndex === 3 && isValidForResultPage(userData))\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport * as PropTypes from 'prop-types'\r\n\r\n// ui lib\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport Step from '@material-ui/core/Step'\r\nimport StepContent from '@material-ui/core/StepContent'\r\nimport StepButton from '@material-ui/core/StepButton'\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nclass AppHeader extends Component {\r\n    render() {\r\n        const { getSteps, getStepContent, orientation } = this.props\r\n        const steps = getSteps ? this.props.getSteps() : []\r\n        const onStepClick = this.props.onStepClick || (() => {})\r\n        return (\r\n            <div>\r\n                <Stepper activeStep={this.props.activeStep} orientation={orientation}>\r\n                    {steps.map((label, index) => {\r\n                        return (\r\n                            <Step key={label}>\r\n                                <StepButton onClick={() => onStepClick(index)}>{label}</StepButton>\r\n                                {getStepContent ? (\r\n                                    <StepContent>\r\n                                        <Typography>{getStepContent(index)}</Typography>\r\n                                    </StepContent>) : ('')}\r\n                            </Step>\r\n                        )\r\n                    })}\r\n                </Stepper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAppHeader.propTypes = {\r\n    activeStep: PropTypes.number.isRequired,\r\n    orientation: PropTypes.string,\r\n    getSteps: PropTypes.func.isRequired,\r\n    getStepContent: PropTypes.func,\r\n    onStepClick: PropTypes.func\r\n}\r\n\r\nexport default AppHeader\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router'\r\nimport { importDataActiveStepperSet } from '../redux/actions/importData.action'\r\n\r\n\r\n// services\r\nimport ImportDataStepperService from './ImportDataStepper.service'\r\n\r\n// components\r\nimport StepsGuide from './general/StepsGuide'\r\n\r\nclass ImportDataStepper extends Component {\r\n    render() {\r\n        const { getSteps, getStepContent } = ImportDataStepperService\r\n        const { activeStepper, userData } = this.props\r\n        const onStepClick = index => {\r\n            if (ImportDataStepperService.isValidToNextStep(index, activeStepper, userData)) {\r\n                this.props.history.push('/')\r\n                this.props.importDataActiveStepperSet(index)\r\n            }\r\n        }\r\n        return (\r\n            <StepsGuide getSteps={getSteps}\r\n                        onStepClick={index => onStepClick(index)}\r\n                        activeStep={this.props.activeStepper}\r\n                        getStepContent={getStepContent}\r\n                        orientation={'vertical'}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeStepper: state.userDataReducer.activeStepper,\r\n        userData: state.userDataReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    importDataActiveStepperSet\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ImportDataStepper))\r\n","/* eslint-disable no-console */\r\n\r\nimport React, {Component} from 'react'\r\nimport * as PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport { AutoSizer, Column, SortDirection, Table } from 'react-virtualized'\r\n\r\nconst styles = theme => ({\r\n    table: {\r\n        fontFamily: theme.typography.fontFamily,\r\n    },\r\n    flexContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        boxSizing: 'border-box',\r\n    },\r\n    tableRow: {\r\n        cursor: 'pointer',\r\n    },\r\n    tableRowHover: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.grey[200],\r\n        },\r\n    },\r\n    tableCell: {\r\n        flex: 1,\r\n    },\r\n    noClick: {\r\n        cursor: 'initial',\r\n    },\r\n})\r\n\r\nclass MuiVirtualizedTable extends React.PureComponent {\r\n    getRowClassName = ({ index }) => {\r\n        const { classes, rowClassName, onRowClick } = this.props\r\n\r\n        return classNames(classes.tableRow, classes.flexContainer, rowClassName, {\r\n            [classes.tableRowHover]: index !== -1 && onRowClick != null,\r\n        })\r\n    }\r\n\r\n    cellRenderer = ({ cellData, columnIndex = null }) => {\r\n        const { columns, classes, rowHeight, onRowClick } = this.props\r\n        return (\r\n            <TableCell\r\n                component=\"div\"\r\n                className={classNames(classes.tableCell, classes.flexContainer, {\r\n                    [classes.noClick]: onRowClick == null,\r\n                })}\r\n                variant=\"body\"\r\n                style={{ height: rowHeight }}\r\n                align={(columnIndex != null && columns[columnIndex].numeric) || false ? 'right' : 'left'}\r\n            >\r\n                {cellData}\r\n            </TableCell>\r\n        )\r\n    }\r\n\r\n    headerRenderer = ({ label, columnIndex, dataKey, sortBy, sortDirection }) => {\r\n        const { headerHeight, columns, classes, sort } = this.props\r\n        const direction = {\r\n            [SortDirection.ASC]: 'asc',\r\n            [SortDirection.DESC]: 'desc',\r\n        }\r\n\r\n        const inner =\r\n            !columns[columnIndex].disableSort && sort != null ? (\r\n                <TableSortLabel active={dataKey === sortBy} direction={direction[sortDirection]}>\r\n                    {label}\r\n                </TableSortLabel>\r\n            ) : (\r\n                label\r\n            )\r\n\r\n        return (\r\n            <TableCell\r\n                component=\"div\"\r\n                className={classNames(classes.tableCell, classes.flexContainer, classes.noClick)}\r\n                variant=\"head\"\r\n                style={{ height: headerHeight }}\r\n                align={columns[columnIndex].numeric || false ? 'right' : 'left'}\r\n            >\r\n                {inner}\r\n            </TableCell>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { classes, columns, ...tableProps } = this.props\r\n        return (\r\n            <AutoSizer>\r\n                {({ height, width }) => (\r\n                    <Table\r\n                        className={classes.table}\r\n                        height={height}\r\n                        width={width}\r\n                        {...tableProps}\r\n                        rowClassName={this.getRowClassName}\r\n                    >\r\n                        {columns.map(({ cellContentRenderer = null, className, dataKey, ...other }, index) => {\r\n                            let renderer\r\n                            if (cellContentRenderer != null) {\r\n                                renderer = cellRendererProps =>\r\n                                    this.cellRenderer({\r\n                                        cellData: cellContentRenderer(cellRendererProps),\r\n                                        columnIndex: index,\r\n                                    })\r\n                            } else {\r\n                                renderer = this.cellRenderer\r\n                            }\r\n\r\n                            return (\r\n                                <Column\r\n                                    key={dataKey}\r\n                                    headerRenderer={headerProps =>\r\n                                        this.headerRenderer({\r\n                                            ...headerProps,\r\n                                            columnIndex: index,\r\n                                        })\r\n                                    }\r\n                                    className={classNames(classes.flexContainer, className)}\r\n                                    cellRenderer={renderer}\r\n                                    dataKey={dataKey}\r\n                                    {...other}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </Table>\r\n                )}\r\n            </AutoSizer>\r\n        )\r\n    }\r\n}\r\n\r\nMuiVirtualizedTable.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    columns: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            cellContentRenderer: PropTypes.func,\r\n            dataKey: PropTypes.string.isRequired,\r\n            width: PropTypes.number.isRequired,\r\n        }),\r\n    ).isRequired,\r\n    headerHeight: PropTypes.number,\r\n    onRowClick: PropTypes.func,\r\n    rowClassName: PropTypes.string,\r\n    rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\r\n    sort: PropTypes.func,\r\n}\r\n\r\nMuiVirtualizedTable.defaultProps = {\r\n    headerHeight: 56,\r\n    rowHeight: 56,\r\n}\r\n\r\nconst WrappedVirtualizedTable = withStyles(styles)(MuiVirtualizedTable)\r\n\r\nclass DataTable extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{ height: 400, width: '100%' }}>\r\n                <WrappedVirtualizedTable\r\n                    rowCount={this.props.tableRows.length}\r\n                    rowGetter={({ index }) => this.props.tableRows[index]}\r\n                    onRowClick={event => console.log(event)}\r\n                    columns={this.props.tableColumns}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDataTable.propTypes = {\r\n    tableColumns: PropTypes.array.isRequired,\r\n    tableRows: PropTypes.array.isRequired\r\n}\r\n\r\nexport default DataTable\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as PropTypes from 'prop-types'\r\n\r\n// ui lib\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport SimpleRadioGroup from '../../general/SimpleRadioGroup'\r\n\r\n// service\r\nimport { genDateForm, genOperationForm } from './ImportDataChooseDataFieldsDialog.service'\r\nimport { showDataFieldsModal } from '../../../redux/actions/application.action'\r\nimport { dateFieldSet, operationFieldSet } from '../../../redux/actions/setting.action'\r\n\r\nconst styles = () => ({\r\n    root: {\r\n        display: 'flex'\r\n    }\r\n})\r\n\r\nlet dateFormValue\r\nlet operationFormValue\r\n\r\nclass ImportDataChooseDataFieldsDialog extends React.Component {\r\n    onDateFormChange = value => {\r\n        dateFormValue = value\r\n    }\r\n\r\n    onOperationFormChange = value => {\r\n        operationFormValue = value\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.props.showDataFieldsModal(false)\r\n        this.props.dateFieldSet(dateFormValue)\r\n        this.props.operationFieldSet(operationFormValue)\r\n    }\r\n\r\n    render() {\r\n        const { classes, showDataFieldModal, dataStock, dateField, operationField } = this.props\r\n        const dateForm = genDateForm(dataStock, this.onDateFormChange, dateField)\r\n        const operationForm = genOperationForm(dataStock, this.onOperationFormChange, operationField)\r\n\r\n        return (\r\n            <Dialog\r\n                open={showDataFieldModal}\r\n                onClose={this.handleClose}\r\n                aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Choose default fields:</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Choose Date Field and Operation Field.\r\n                    </DialogContentText>\r\n                    <div className={classes.root}>\r\n                        <SimpleRadioGroup {...dateForm}/>\r\n                        <SimpleRadioGroup {...operationForm}/>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.handleClose} color=\"primary\">\r\n                        It's OK\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\nImportDataChooseDataFieldsDialog.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        showDataFieldModal: state.applicationReducer.showDataFieldModal,\r\n        dataStock: state.userDataReducer.dataStock,\r\n        dateField: state.settingReducer.dateField,\r\n        operationField: state.settingReducer.operationField\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    showDataFieldsModal,\r\n    dateFieldSet,\r\n    operationFieldSet\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ImportDataChooseDataFieldsDialog))\r\n","/**\r\n * logger service in adapter pattern\r\n * @module\r\n * @private\r\n * */\r\n\r\n\r\n/**\r\n * @param {object} adapter - adapter should has these methods.\r\n */\r\nexport default (function (adapter) {\r\n    return {\r\n        /**\r\n         * Log a content.\r\n         * @param {string} content - log the content.\r\n         */\r\n        log (content) {\r\n            adapter.log(content)\r\n        },\r\n        /**\r\n         * Error a content.\r\n         * @param {string} content - Error the content.\r\n         */\r\n        error (content) {\r\n            adapter.error(content)\r\n        }\r\n    }\r\n})(console)\r\n","import DataTableService from '../../general/DataTable.service'\r\nconst { genColumn } = DataTableService\r\n\r\nconst getColumns = data => {\r\n    if (!data.length) return []\r\n    return Object.keys(data[0]).map(key => {\r\n        const isNumber = !isNaN(data[0][key])\r\n        const width = isNumber ? 120 : 200\r\n\r\n        return genColumn(key, key, isNumber, width)\r\n    })\r\n}\r\n\r\nconst getRows = data => {\r\n    let id = 0\r\n\r\n    return data.map(item => {\r\n        id += 1\r\n        return Object.assign({}, item, { id })\r\n    })\r\n}\r\n\r\nconst getTableData = state => {\r\n    let rawData\r\n    switch (state.userDataReducer.activeStepper) {\r\n        case 0:\r\n            rawData = state.userDataReducer.dataStock\r\n            break\r\n        case 1:\r\n            rawData = state.userDataReducer.dataMarket\r\n            break\r\n        case 2:\r\n            rawData = state.userDataReducer.dataCalendar\r\n            break\r\n        default:\r\n            rawData = []\r\n            break\r\n    }\r\n\r\n    const tableRows = getRows(rawData)\r\n    const tableColumns = getColumns(rawData)\r\n\r\n    return {\r\n        tableRows,\r\n        tableColumns\r\n    }\r\n}\r\n\r\nexport default {\r\n    getTableData\r\n}\r\n","export default {\r\n    genColumn (label, dataKey, numeric = true, width = 120) {\r\n        return {\r\n            label,\r\n            dataKey,\r\n            numeric,\r\n            width\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\n// components\r\nimport  DatTable from '../../general/DataTable'\r\n\r\n// service\r\nimport ImportDataTableService from './ImportDataTable.service'\r\n\r\nclass ImportDataTable extends Component {\r\n    render() {\r\n        const tableColumns = this.props.tableData.tableColumns\r\n        const tableRows = this.props.tableData.tableRows\r\n\r\n        return (\r\n            <DatTable tableColumns={tableColumns} tableRows={tableRows}/>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tableData: ImportDataTableService.getTableData(state),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ImportDataTable)\r\n","const csv = require(\"csvtojson/v2\")\r\n\r\nconst readAsText = file => {\r\n    return new Promise((resolve, reject) => {\r\n        const fileReader = new FileReader()\r\n        fileReader.readAsText(file)\r\n        fileReader.onload = resolve\r\n        fileReader.onerror = reject\r\n    })\r\n}\r\n\r\nexport const fileToJson = file => {\r\n    return new Promise((resolve, reject) => {\r\n        readAsText(file)\r\n            .then(data => {\r\n                if (file.name.endsWith('.csv')) {\r\n                    csv()\r\n                        .fromString(data.target.result)\r\n                        .then(resolve)\r\n                        .catch(reject)\r\n                } else {\r\n                    resolve(JSON.parse(data.target.result))\r\n                }\r\n            })\r\n            .catch(reject)\r\n    })\r\n}\r\n","import {\r\n    SHOW_DATA_FIELDS_MODAL_SET\r\n} from '../actionTypes'\r\n\r\nexport const showDataFieldsModal = show => ({\r\n    type: SHOW_DATA_FIELDS_MODAL_SET,\r\n    payload: {\r\n        show\r\n    }\r\n})\r\n","export default {\r\n    showNextStep (state) {\r\n        switch (state.userDataReducer.activeStepper) {\r\n            case 0:\r\n                return state.userDataReducer.dataStock.length\r\n            case 1:\r\n                return state.userDataReducer.dataMarket.length\r\n            case 2:\r\n                return state.userDataReducer.dataCalendar.length\r\n            default:\r\n                return 0\r\n        }\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router'\r\nimport * as PropTypes from 'prop-types'\r\n\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nimport { fileToJson } from '../../../services/utility/fileReader'\r\nimport { showDataFieldsModal } from '../../../redux/actions/application.action'\r\nimport { stockDataSet, marketDataSet, calendarDataSet, importDataActiveStepperSet } from '../../../redux/actions/importData.action'\r\n\r\nimport ImportDataInputService from './ImportDataInput.service'\r\n\r\nconst styles = {\r\n    grow: {\r\n        flexGrow: 1\r\n    }\r\n}\r\n\r\nclass ImportDataInput extends Component {\r\n    handleInputFileChange = event => {\r\n        const file = event.target.files[0]\r\n        if (!file) return\r\n\r\n        fileToJson(file).then(json => {\r\n            switch (this.props.activeStepper) {\r\n                case 0:\r\n                    this.props.stockDataSet(json)\r\n                    break\r\n                case 1:\r\n                    this.props.marketDataSet(json)\r\n                    break\r\n                case 2:\r\n                    this.props.calendarDataSet(json)\r\n                    break\r\n                default:\r\n                    console.error('invalid operation')\r\n                    break\r\n            }\r\n        })\r\n    }\r\n\r\n    onNextStepClick = () => {\r\n        const activeStepper = this.props.activeStepper\r\n        this.props.importDataActiveStepperSet(activeStepper + 1)\r\n        if (activeStepper === 0 && !this.props.dateField && !this.props.operationField) {\r\n            this.props.showDataFieldsModal(true)\r\n        } else if (activeStepper === 2) {\r\n            this.props.history.push('/result')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props\r\n        return (\r\n            <Toolbar>\r\n                <span className={classes.grow}> </span>\r\n                {\r\n                    this.props.showNextStep ? (<Button color=\"secondary\" onClick={this.onNextStepClick} component=\"span\">Next Step</Button>) : ('')\r\n                }\r\n\r\n                <input\r\n                    accept=\".json, .csv\"\r\n                    id=\"contained-button-file\"\r\n                    onChange={this.handleInputFileChange}\r\n                    style={{display: 'none'}}\r\n                    type=\"file\"\r\n                />\r\n                <label htmlFor=\"contained-button-file\">\r\n                    <Button color=\"primary\" component=\"span\">Upload</Button>\r\n                </label>\r\n            </Toolbar>\r\n        )\r\n    }\r\n}\r\n\r\nImportDataInput.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeStepper: state.userDataReducer.activeStepper,\r\n        activeStepperMax: state.userDataReducer.activeStepperMax,\r\n        showNextStep: ImportDataInputService.showNextStep(state),\r\n        dateField: state.settingReducer.dateField,\r\n        operationField: state.settingReducer.operationField\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    stockDataSet,\r\n    marketDataSet,\r\n    calendarDataSet,\r\n    importDataActiveStepperSet,\r\n    showDataFieldsModal\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ImportDataInput)))\r\n","import React, {Component} from 'react'\r\nimport * as PropTypes from 'prop-types'\r\n\r\n// ui components\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\n\r\nconst styles = theme => ({\r\n    formControl: {\r\n        margin: theme.spacing.unit * 3\r\n    },\r\n    group: {\r\n        margin: `${theme.spacing.unit}px 0`\r\n    }\r\n})\r\n\r\nclass SimpleRadioGroup extends Component {\r\n    state = {\r\n        value: this.props.defaultValue\r\n    }\r\n\r\n    handleChange = event => {\r\n        const value = event.target.value\r\n        this.setState({ value })\r\n        this.props.onValueChange(value)\r\n    }\r\n\r\n    render() {\r\n        const { classes, radios, formLabel, groupName } = this.props\r\n\r\n        return (\r\n            <FormControl component=\"fieldset\" className={classes.formControl}>\r\n                <FormLabel component=\"legend\">{formLabel}</FormLabel>\r\n                <RadioGroup\r\n                    aria-label={formLabel}\r\n                    name={groupName}\r\n                    className={classes.group}\r\n                    value={this.state.value}\r\n                    onChange={this.handleChange}>\r\n                    {\r\n                        radios.map(radio => (\r\n                                <FormControlLabel key={radio.value}\r\n                                                  value={radio.value}\r\n                                                  control={<Radio />}\r\n                                                  label={radio.label} />\r\n                            )\r\n                        )\r\n                    }\r\n                </RadioGroup>\r\n            </FormControl>\r\n        )\r\n    }\r\n}\r\n\r\nSimpleRadioGroup.propTypes = {\r\n    formLabel: PropTypes.string.isRequired,\r\n    groupName: PropTypes.string.isRequired,\r\n    radios: PropTypes.array.isRequired,\r\n    defaultValue: PropTypes.string.isRequired,\r\n    onValueChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(SimpleRadioGroup)\r\n","const stringToRadio = s => ({ value: s, label: s })\r\n\r\nexport const genDateForm = (dataStock, onValueChange, defaultValue) => ({\r\n    defaultValue: defaultValue,\r\n    groupName: 'dateField',\r\n    formLabel: 'date field',\r\n    onValueChange,\r\n    radios: Object.keys(dataStock[0] || {}).map(stringToRadio)\r\n})\r\n\r\nexport const genOperationForm = (dataStock, onValueChange, defaultValue) => ({\r\n    defaultValue: defaultValue,\r\n    groupName: 'operationField',\r\n    formLabel: 'operation field',\r\n    onValueChange,\r\n    radios: Object.keys(dataStock[0] || {}).map(stringToRadio)\r\n})\r\n","import {\r\n    SELECTED_EVENT_DATE_SET,\r\n    TOT1_SET,\r\n    T1E_SET,\r\n    ET2_SET,\r\n    T2T3_SET,\r\n    DATE_FIELD_SET,\r\n    OPERATION_FIELD_SET\r\n} from '../actionTypes'\r\n\r\nexport const selectedEventDateSet = date => ({\r\n    type: SELECTED_EVENT_DATE_SET,\r\n    payload: {\r\n        date\r\n    }\r\n})\r\n\r\nexport const TOT1Set = length => ({\r\n    type: TOT1_SET,\r\n    payload: {\r\n        length\r\n    }\r\n})\r\n\r\nexport const T1ESet = length => ({\r\n    type: T1E_SET,\r\n    payload: {\r\n        length\r\n    }\r\n})\r\n\r\nexport const ET2Set = length => ({\r\n    type: ET2_SET,\r\n    payload: {\r\n        length\r\n    }\r\n})\r\n\r\nexport const T2T3Set = length => ({\r\n    type: T2T3_SET,\r\n    payload: {\r\n        length\r\n    }\r\n})\r\n\r\nexport const dateFieldSet = field => ({\r\n    type: DATE_FIELD_SET,\r\n    payload: {\r\n        field\r\n    }\r\n})\r\n\r\nexport const operationFieldSet = field => ({\r\n    type: OPERATION_FIELD_SET,\r\n    payload: {\r\n        field\r\n    }\r\n})\r\n","import React, { Component } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport ImportDataTable from './ImportDataTable'\r\nimport ImportDataInput from './ImportDataInput'\r\nimport ImportDataChooseDataFieldsDialog from './ImportDataChooseDataFieldsDialog'\r\n\r\nclass PageResult extends Component {\r\n    render() {\r\n        return (\r\n            <Grid item xs={7}>\r\n                <ImportDataInput/>\r\n\r\n                <ImportDataTable/>\r\n\r\n                <ImportDataChooseDataFieldsDialog/>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PageResult\r\n","/**\r\n * service for measuring performance of portfolio\r\n * @module\r\n * */\r\n\r\nimport math from 'mathjs'\r\nimport logger from './logger'\r\n\r\nconst isNotNaN = x => !isNaN(x)\r\n\r\nexport default {\r\n    /**\r\n     * Calculate percentage return between two points\r\n     * @param {number} startValue - first number\r\n     * @param {number} endValue - second number\r\n     * @returns {number} result in percentages\r\n     * @private\r\n     */\r\n    returnsBasic (startValue, endValue) {\r\n        return (endValue / startValue) - 1\r\n    },\r\n    /**\r\n     * Calculate daily returns\r\n     * @param {array} endValues - list of prices\r\n     * @returns {array}\r\n     */\r\n    returnsDaily (endValues) {\r\n        return endValues.map((v, i, a) => (v / a[i - 1]) - 1).filter(isNotNaN)\r\n    },\r\n    /**\r\n     * Calculate standard deviation of daily returns (risk)\r\n     * @param {array} dailyReturns - list of daily returns of prices\r\n     * @returns {number}\r\n     * @private\r\n     */\r\n    volatility (dailyReturns) {\r\n        return math.std(dailyReturns)\r\n    },\r\n    /**\r\n     * Calculate normalize prices - divide prices by head\r\n     * @param {array} prices - prices indexed by date\r\n     * @returns {array} - normalized prices\r\n     * @private\r\n     */\r\n    returnsCumulative (prices) {\r\n        const head = prices[0]\r\n        const divideBy = by => x => x / by\r\n        const divideByHead = divideBy(head)\r\n\r\n        return prices.map(divideByHead)\r\n    },\r\n    // @TODO add draw down\r\n    /**\r\n     * Calculate performance of portfolio(sharpRatio)\r\n     * @param {array} dailyReturns - daily returns\r\n     * @param {string} period - 'DAILY', 'MONTHLY'; right now these constants implemented\r\n     * @returns {number}\r\n     * @private\r\n     */\r\n    sharpRatio (dailyReturns, period) {\r\n        let k\r\n        switch (period) {\r\n            case 'DAILY':\r\n                k = 250\r\n                break\r\n            case 'MONTHLY':\r\n                k = 12\r\n                break\r\n            default:\r\n                logger.error('INVALID parameters in sharpRatio')\r\n                return 0\r\n        }\r\n        return math.sqrt(k) * math.mean(dailyReturns) / math.std(dailyReturns)\r\n    }\r\n}\r\n","/**\r\n * Service for capital asset price model (CAPM).\r\n * The relationship between market price and stock price.\r\n * @module\r\n * @private\r\n * */\r\n\r\nimport regression from 'regression'\r\nimport zip from 'ramda/src/zip'\r\nimport sum from 'ramda/src/sum'\r\nimport mapObjIndexed from 'ramda/src/mapObjIndexed'\r\nimport __ from 'ramda/src/__'\r\nimport divide from 'ramda/src/divide'\r\n\r\n/**\r\n * Get relationship between market and stock price\r\n * It uses linear regression to find relation ship\r\n * @param {array} marketReturn - market returns\r\n * @param {array} stockReturn - stock returns\r\n * @return {*|{r2, string, equation, predict, points}}\r\n */\r\nconst CAPMParams = (marketReturn, stockReturn) => regression.linear(zip(marketReturn, stockReturn), { precision: 8 })\r\n\r\n/**\r\n * Divide allocations to sum of all allocations\r\n * @param {object} assetsAllocation - how much money goes to which assets\r\n * @return {object} - allocations ratio\r\n * @private\r\n */\r\nconst allocationsWeights = (assetsAllocation) => {\r\n    const sumOfAllocations = sum(Object.values(assetsAllocation))\r\n    const divideBySum = divide(__, sumOfAllocations)\r\n\r\n    return mapObjIndexed(divideBySum, assetsAllocation)\r\n}\r\n\r\n/**\r\n * Calculate beta of a portfolio by multiplying beta of an asset to weight of investment.\r\n * @param {object} assetsAllocation\r\n * @param {object} assetsBeta\r\n * @return {number}\r\n */\r\nconst portfolioBeta = (assetsAllocation, assetsBeta) => {\r\n    const weights = allocationsWeights(assetsAllocation)\r\n\r\n    return Object.keys(weights).reduce((a, b) => a + weights[b] * assetsBeta[b] ,0)\r\n}\r\n\r\nconst CAPM = {\r\n    CAPMParams,\r\n    portfolioBeta\r\n}\r\n\r\nexport default CAPM\r\n","/**\r\n * event profiler service\r\n * @module\r\n * */\r\nimport assessingFundPerformance from './fundPerformance'\r\nimport CAPM from './CAPM'\r\nimport zip from 'ramda/src/zip'\r\nimport subtract from 'ramda/src/subtract'\r\nimport mean from 'ramda/src/mean'\r\nimport sum from 'ramda/src/sum'\r\nimport divide from 'ramda/src/divide'\r\nimport __ from 'ramda/src/__'\r\n\r\n/**\r\n * Calculate standard regression error\r\n * @param {array} y - y points\r\n * @param {array} x - x points\r\n * @return {number} - standard regression error\r\n * @example\r\n * regressionStandardError(stock, market)\r\n * @private\r\n */\r\nconst regressionStandardError = (y, x) => {\r\n    const meanY = mean(y)\r\n    const meanX = mean(x)\r\n    const subtractMeanY = subtract(meanY)\r\n    const subtractMeanX = subtract(meanX)\r\n    const square = x => x ** 2\r\n    const sumSubMeanYSquare = sum(y.map(subtractMeanY).map(square))\r\n    const sumSubMeanXSquare = sum(x.map(subtractMeanX).map(square))\r\n    const divideByLength = divide(__, y.length - 2)\r\n\r\n    const sumSubtractedMultiSubtractedSquare = function () {\r\n        let result = []\r\n\r\n        x.forEach((item, index) => {\r\n            result.push((item - meanX) * (y[index] - meanY))\r\n        })\r\n\r\n        return square(sum(result))\r\n    }\r\n\r\n\r\n    return Math.sqrt(divideByLength(sumSubMeanYSquare - (sumSubtractedMultiSubtractedSquare() / sumSubMeanXSquare)))\r\n}\r\n\r\n/**\r\n * Find events in Market, Event is found if the symbol is down more than 3% while the market is up more then 2%\r\n * @param {array} marketPrice - Market prices indexed by date like open, close, ...\r\n * @param {array} stockPrice - Stock prices indexed by date like open, close, ...\r\n * @return {array<number|null>} Array of true indexes and null, true means found an event.\r\n * @private\r\n */\r\nconst eventFind = (marketPrice, stockPrice) => {\r\n    const stockDailyReturn = assessingFundPerformance.returnsDaily(stockPrice)\r\n    const marketDailyReturn = assessingFundPerformance.returnsDaily(marketPrice)\r\n\r\n    const stockWithMarketReturn = zip(stockDailyReturn, marketDailyReturn)\r\n\r\n    const eventDetection = (a, i) => (a[0] <= -0.03 && a[1] >= 0.02) ? i : null\r\n    return stockWithMarketReturn.map(eventDetection)\r\n}\r\n\r\n/**\r\n * Calculate normal return with mean of estimation returns\r\n * @param {array} stockEstimationWindowReturns - estimation return window see event study time line\r\n * @return {number}\r\n * @private\r\n */\r\nconst MAR = stockEstimationWindowReturns => mean(stockEstimationWindowReturns)\r\n\r\n/**\r\n * return market returns; see how to measure abnormal return\r\n * @return {array} - market returns\r\n * @private\r\n */\r\nconst MKAR = marketReturns => marketReturns\r\n\r\n/**\r\n * Calculate normal returns from observation market returns\r\n * @param {array} marketReturnsForCAPM - market returns for calculating CAPM regression\r\n * @param {array} stockReturnsForCAPM - stock returns for calculating CAMP regression\r\n * @param {array} observationMarketReturns - market prices used for prediction in CAPM regression\r\n * @return {array} - prediction normal returns\r\n * @private\r\n */\r\nconst RAR = (marketReturnsForCAPM, stockReturnsForCAPM, observationMarketReturns) => {\r\n    const regression = CAPM.CAPMParams(marketReturnsForCAPM, stockReturnsForCAPM)\r\n    const equation = regression.equation\r\n    const predict = x => equation[0] * x + equation[1]\r\n    return observationMarketReturns.map(predict)\r\n}\r\n\r\n/**\r\n * Calculate normal return of a security\r\n * @param {string} type - can be MAR (mean adjusted returns Model), MKAR (market adjusted returns model), RAR (risk adjusted returns model)\r\n * @param {object} data - required data to perform operations\r\n * @param {array} [data.stockEstimationWindowReturns] - stock estimation return window see event study time line\r\n * @param {array} [data.marketReturns] - market returns\r\n * @param {array} [data.marketReturnsForCAPM] - market returns for calculating regression between stock return and market return\r\n * @param {array} [data.stockReturnsForCAPM] - stock returns for calculating regression between stock return and market return\r\n * @param {array} [data.observationMarketReturns] - market returns in observation window for predicting normal return of stock\r\n * @return {(number|array)}\r\n */\r\nconst returnsNormal = (type = 'MAR', data) => {\r\n    switch (type) {\r\n        case 'MAR':\r\n            return MAR(data.stockEstimationWindowReturns)\r\n        case 'MKAR':\r\n            return MKAR(data.marketReturns)\r\n        case 'RAR':\r\n            return RAR(data.marketReturnsForCAPM, data.stockReturnsForCAPM, data.observationMarketReturns)\r\n        default:\r\n            return []\r\n    }\r\n}\r\n\r\n/**\r\n * subtract real stock return from normal estimated return\r\n * to find abnormal return\r\n * @param {array} realStockReturn\r\n * @param {array} normalStockReturn\r\n * @return {array}\r\n */\r\nconst returnsAbnormal = (realStockReturn, normalStockReturn) => zip(realStockReturn, normalStockReturn).map(a => subtract(...a))\r\n\r\n/**\r\n * test statistic is for calculating event significant\r\n * @param {array} AR - abnormal returns\r\n * @param {number} regressionError - regression error\r\n * @return {array} - AR / regressionError\r\n */\r\nconst testStatistic = (AR, regressionError) => AR.map(item => divide(item, regressionError))\r\n\r\n/**\r\n * Calculate was event significant\r\n * @param {array} TS - test statistics\r\n * @return {array<boolean>}\r\n */\r\nconst testSignificant = TS => TS.map(item => Math.abs(item) > 1.96)\r\n\r\n/**\r\n * Calculate cumulative abnormal return by sum with previous value\r\n * @param {array} AR - abnormal returns\r\n * @return {array}\r\n */\r\nconst returnsAbnormalCumulative = AR => AR.reduce((a, b, i) => {\r\n    a[i] = b + (a[i - 1] || 0)\r\n    return a\r\n}, [])\r\n\r\nexport default {\r\n    eventFind,\r\n    returnsNormal,\r\n    returnsAbnormal,\r\n    returnsAbnormalCumulative,\r\n    testStatistic,\r\n    testSignificant,\r\n    regressionStandardError\r\n}\r\n","import prop from 'ramda/src/prop'\r\nimport propEq from 'ramda/src/propEq'\r\nimport findIndex from 'ramda/src/findIndex'\r\nimport slice from 'ramda/src/slice'\r\nimport mapObjIndexed from 'ramda/src/mapObjIndexed'\r\nimport indexBy from 'ramda/src/indexBy'\r\nimport pick from 'ramda/src/pick'\r\nimport values from 'ramda/src/values'\r\n\r\nimport eventStudyService from '../../../services/eventStudy'\r\nimport assessingFundPerformance from '../../../services/fundPerformance'\r\n\r\n// getters\r\nconst extractDataCalendar = (state, dateField) => state.userDataReducer.dataCalendar.map(prop(dateField))\r\nconst getMarketData = state => state.userDataReducer.dataMarket\r\nconst getStockData = state => state.userDataReducer.dataStock\r\nconst getTimeline = state => {\r\n    const { T0T1, T1E, ET2, T2T3 } = state.settingReducer\r\n    return { T0T1, T1E, ET2, T2T3 }\r\n}\r\n\r\nconst indexByDate = dateField => indexBy(prop(dateField))\r\n/**\r\n * create arrays for every part (estimation window, observation window, post event window)\r\n * @param date {string} - calendar dates\r\n * @param stockData {array<object>} - stock information\r\n * @param marketData {array<object>} - market information\r\n * @param timeline {object} - timeline properties\r\n * @param dateField {string} - date field in json data\r\n * @param [aggregate] {function} - it will apply to end window results\r\n * @return {object}\r\n */\r\nconst extractDateWindows = ({date, stockData, marketData, timeline, aggregate, dateField}) => {\r\n    const { T0T1, T1E, ET2, T2T3 } = timeline\r\n    const findDateIndex = findIndex(propEq(dateField, date))\r\n    const indexStock = findDateIndex(stockData)\r\n    const indexMarket = findDateIndex(marketData)\r\n\r\n    const indexesStockEstimationWindow = [indexStock - T1E - T0T1 + 1, indexStock - T1E + 1]\r\n    const indexesMarketEstimationWindow = [indexMarket - T1E - T0T1 + 1, indexMarket - T1E + 1]\r\n\r\n    const indexesStockEventWindow = [indexStock - T1E + 1, indexStock + ET2 + 1]\r\n    const indexesMarketEventWindow = [indexMarket - T1E + 1, indexMarket + ET2 + 1]\r\n\r\n    const indexesStockPostEventWindow = [indexStock + ET2 + 1, indexStock + ET2 + T2T3 + 1]\r\n    const indexesMarketPostEventWindow = [indexMarket + ET2 + 1, indexMarket + ET2 + T2T3 + 1]\r\n\r\n    const stockEstimationWindow = slice(indexesStockEstimationWindow[0], indexesStockEstimationWindow[1], stockData)\r\n    const marketEstimationWindow = slice(indexesMarketEstimationWindow[0], indexesMarketEstimationWindow[1], marketData)\r\n\r\n    const stockEventWindow = slice(indexesStockEventWindow[0], indexesStockEventWindow[1], stockData)\r\n    const marketEventWindow = slice(indexesMarketEventWindow[0], indexesMarketEventWindow[1], marketData)\r\n\r\n    const stockPostEventWindow = slice(indexesStockPostEventWindow[0], indexesStockPostEventWindow[1], stockData)\r\n    const marketPostEventWindow = slice(indexesMarketPostEventWindow[0], indexesMarketPostEventWindow[1], marketData)\r\n\r\n    const results = {\r\n        stockEstimationWindow,\r\n        marketEstimationWindow,\r\n        stockEventWindow,\r\n        marketEventWindow,\r\n        stockPostEventWindow,\r\n        marketPostEventWindow\r\n    }\r\n\r\n    if (aggregate) {\r\n        return {\r\n            date,\r\n            originalResult: results,\r\n            ...mapObjIndexed(aggregate, results)\r\n        }\r\n    } else {\r\n        return {\r\n            date,\r\n            ...results\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * main part of our program to gather all services together\r\n * @param state {object}\r\n * @return {{dates: {array}, resultPerDates: {object}}}\r\n */\r\nconst analyseDates = state => {\r\n    const dateField = state.settingReducer.dateField\r\n    const operationField = state.settingReducer.operationField\r\n\r\n    const calcReturns = data => assessingFundPerformance.returnsDaily(data.map(prop(operationField)))\r\n\r\n    const dates = extractDataCalendar(state, dateField)\r\n    const marketData = getMarketData(state)\r\n    const stockData = getStockData(state)\r\n    // remove mismatch dates from market data with stock data\r\n    const cleanMarketData = values(pick(stockData.map(prop(dateField)), indexByDate(dateField)(marketData)))\r\n    const timeline = getTimeline(state)\r\n\r\n    const windowsPerDate = dates.map(date => extractDateWindows({\r\n        date,\r\n        stockData,\r\n        marketData: cleanMarketData,\r\n        timeline,\r\n        aggregate: calcReturns,\r\n        dateField\r\n    }))\r\n\r\n    const getRegressionError = ({stockEstimationWindow, marketEstimationWindow}) => {\r\n        return eventStudyService.regressionStandardError(stockEstimationWindow, marketEstimationWindow)\r\n    }\r\n\r\n    const regressionStandardErrors = windowsPerDate.map(getRegressionError)\r\n\r\n    const getNormalReturn = ({ stockEstimationWindow, marketEstimationWindow, marketEventWindow}) => {\r\n        return eventStudyService.returnsNormal('RAR', {\r\n            marketReturnsForCAPM: marketEstimationWindow,\r\n            stockReturnsForCAPM: stockEstimationWindow,\r\n            observationMarketReturns: marketEventWindow\r\n        })\r\n    }\r\n\r\n    const eventWindowsNormalReturns = windowsPerDate.map(getNormalReturn)\r\n\r\n    const getAbnormalReturn = ({stockEventWindow}, index) => {\r\n        return eventStudyService.returnsAbnormal(stockEventWindow, eventWindowsNormalReturns[index])\r\n    }\r\n\r\n    const eventWindowsAbnormalReturns = windowsPerDate.map(getAbnormalReturn)\r\n\r\n    const getStatisticTest = (RT, index) => {\r\n        return eventStudyService.testStatistic(RT, regressionStandardErrors[index])\r\n    }\r\n\r\n    const eventWindowStatisticalTests = eventWindowsAbnormalReturns.map(getStatisticTest)\r\n\r\n    const eventWindowSignificantTests = eventWindowStatisticalTests.map(eventStudyService.testSignificant)\r\n\r\n    const eventWindowCUMs = eventWindowsAbnormalReturns.map(eventStudyService.returnsAbnormalCumulative)\r\n\r\n    const getResultPerDates = (o, index) => ({\r\n        Date: o.date,\r\n        RegressionError: regressionStandardErrors[index],\r\n        eventWindowsNormalReturn: eventWindowsNormalReturns[index],\r\n        eventWindowsAbnormalReturn: eventWindowsAbnormalReturns[index],\r\n        eventWindowStatisticalTest: eventWindowStatisticalTests[index],\r\n        eventWindowSignificantTest: eventWindowSignificantTests[index],\r\n        eventWindowCUM: eventWindowCUMs[index],\r\n        eventWindowsDates: o.originalResult.marketEventWindow.map(prop(dateField)).slice(1),\r\n        stockEventWindow: o.stockEventWindow,\r\n        marketEventWindow: o.marketEventWindow\r\n    })\r\n\r\n    const resultPerDates = indexByDate(dateField)(windowsPerDate.map(getResultPerDates))\r\n\r\n    return {\r\n        dates,\r\n        resultPerDates\r\n    }\r\n}\r\n\r\nconst getAnalysedProp = activeBtn => {\r\n    switch (activeBtn) {\r\n        case 'CUM':\r\n            return 'eventWindowCUM'\r\n        case 'AR':\r\n            return 'eventWindowsAbnormalReturn'\r\n        case 'NR':\r\n            return 'eventWindowsNormalReturn'\r\n        case 'MR':\r\n            return 'marketEventWindow'\r\n        case 'SR':\r\n            return 'stockEventWindow'\r\n        default:\r\n            return 'eventWindowStatisticalTest'\r\n    }\r\n}\r\n\r\nexport default {\r\n    analyseDates,\r\n    getAnalysedProp\r\n}\r\n","import React, {Component} from 'react'\r\nimport * as PropTypes from 'prop-types'\r\n// ui components\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\n\r\nclass SimpleList extends Component {\r\n    render() {\r\n        const onItemClick = this.props.onItemClick || (() => {})\r\n\r\n        return (\r\n            <List component=\"nav\">\r\n                {\r\n                    this.props.items.map(item => (\r\n                        <ListItem button key={item}>\r\n                            <ListItemText primary={item} onClick={() => onItemClick(item)}/>\r\n                        </ListItem>\r\n                    ))\r\n                }\r\n            </List>\r\n        )\r\n    }\r\n}\r\n\r\nSimpleList.propTypes = {\r\n    items: PropTypes.array.isRequired,\r\n    onItemClick: PropTypes.func\r\n}\r\n\r\nexport default SimpleList\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as PropTypes from 'prop-types'\r\nimport SimpleList from '../../general/SimpleList'\r\nimport { activeResultDateSet } from '../../../redux/actions/importData.action'\r\n\r\nclass ResultCalendarList extends Component {\r\n    render() {\r\n        return (\r\n            <SimpleList items={this.props.items} onItemClick={this.props.activeResultDateSet}/>\r\n        )\r\n    }\r\n}\r\n\r\nResultCalendarList.propTypes = {\r\n    items: PropTypes.array.isRequired\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    activeResultDateSet\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ResultCalendarList)\r\n","import React, { PureComponent } from 'react'\r\nimport * as PropTypes from 'prop-types'\r\nimport {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend\r\n} from 'recharts'\r\n\r\nimport omit from 'ramda/src/omit'\r\nimport keys from 'ramda/src/keys'\r\n\r\nclass SimpleLineChart extends PureComponent {\r\n    render() {\r\n        const data = this.props.data\r\n        const lines = keys(omit(['name'], data[0]))\r\n\r\n        return (\r\n            <LineChart\r\n                width={500}\r\n                height={300}\r\n                data={data}\r\n                margin={{\r\n                    top: 5, right: 30, left: 20, bottom: 5,\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                <XAxis dataKey=\"name\"/>\r\n                <YAxis/>\r\n                <Tooltip/>\r\n                <Legend/>\r\n                {\r\n                    lines.map(line => (<Line key={line} type=\"monotone\" dataKey={line} stroke=\"#8884d8\"/>))\r\n                }\r\n            </LineChart>\r\n        )\r\n    }\r\n}\r\n\r\nSimpleLineChart.propTypes = {\r\n    data: PropTypes.array.isRequired\r\n}\r\n\r\nexport default SimpleLineChart\r\n","import React, { Component } from 'react'\r\nimport * as PropTypes from 'prop-types'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nclass ResultToolbar extends Component {\r\n    render() {\r\n        return (\r\n            <Toolbar>\r\n                <Button color=\"primary\" component=\"span\" onClick={() => this.props.onToolbarClick('ST')}>Statistical Test</Button>\r\n                <Button color=\"primary\" component=\"span\" onClick={() => this.props.onToolbarClick('CUM')}>CUM</Button>\r\n                <Button color=\"primary\" component=\"span\" onClick={() => this.props.onToolbarClick('AR')}>Abnormal Returns</Button>\r\n                <Button color=\"primary\" component=\"span\" onClick={() => this.props.onToolbarClick('NR')}>Normal Returns</Button>\r\n                <Button color=\"primary\" component=\"span\" onClick={() => this.props.onToolbarClick('MR')}>Market Returns</Button>\r\n                <Button color=\"primary\" component=\"span\" onClick={() => this.props.onToolbarClick('SR')}>Stock Returns</Button>\r\n            </Toolbar>\r\n        )\r\n    }\r\n}\r\n\r\nResultToolbar.propTypes = {\r\n    onToolbarClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ResultToolbar\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport ResultService from './Result.service'\r\nimport ResultCalendarList from './ResultCalendarList'\r\nimport SimpleLineChart from '../../general/SimpleLineChart'\r\nimport ResultToolbar from './ResultToolbar'\r\n\r\nclass Result extends Component {\r\n    state = {\r\n        activeBtn: 'CUM'\r\n    }\r\n\r\n    onToolbarClick = active => {\r\n        this.setState({\r\n            activeBtn: active\r\n        })\r\n    }\r\n    render() {\r\n        const resultPerDates = this.props.analysed.resultPerDates\r\n        const activeDate = this.props.activeResultDate\r\n\r\n        const analysedProp = ResultService.getAnalysedProp(this.state.activeBtn)\r\n\r\n        const currentDateData = resultPerDates[activeDate] ? resultPerDates[activeDate][analysedProp] : []\r\n        const currentDates = resultPerDates[activeDate] ? resultPerDates[activeDate].eventWindowsDates : []\r\n\r\n        const transferToChartData = (value, index) => ({\r\n            name: currentDates[index].toString(),\r\n            [this.state.activeBtn]: value\r\n        })\r\n\r\n        const data = currentDateData.map(transferToChartData)\r\n\r\n        return (\r\n            <Grid item container xs={7}>\r\n                <Grid item container>\r\n                    <ResultToolbar onToolbarClick={this.onToolbarClick}/>\r\n                </Grid>\r\n                <Grid item container justify=\"center\" xs={12}>\r\n                    <Grid item xs={3}>\r\n                        <ResultCalendarList items={this.props.analysed.dates}/>\r\n                    </Grid>\r\n                    <Grid item xs={7}>\r\n                        <SimpleLineChart data={data}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        analysed: ResultService.analyseDates(state),\r\n        activeResultDate: state.userDataReducer.activeResultDate\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Result)\r\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\n// ui lib\nimport Grid from '@material-ui/core/Grid'\n\n// fonts and css\nimport 'typeface-roboto'\nimport './App.css'\n\n// import data page\nimport ImportDataStepper from './components/ImportDataStepper'\n\nimport ImportData from './components/pages/importData/ImportData'\n// result page\nimport Result from './components/pages/result/Result'\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <Grid container>\n                    <Grid item container justify=\"center\" xs={12}>\n                        <Grid item xs={3}>\n                            <ImportDataStepper/>\n                        </Grid>\n\n                        <Route path=\"/\" exact component={ImportData} />\n                        <Route path=\"/result\" exact component={Result} />\n                    </Grid>\n                </Grid>\n            </Router>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    STOCK_DATA_SET,\r\n    MARKET_DATA_SET,\r\n    CALENDAR_DATA_SET,\r\n    IMPORT_DATA_ACTIVE_STEPPER_SET,\r\n    ACTIVE_RESULT_DATE_SET\r\n} from '../actionTypes'\r\n\r\nconst initialState = {\r\n    dataStock: [],\r\n    dataMarket: [],\r\n    dataCalendar: [],\r\n    activeStepper: 0,\r\n    activeStepperMax: 2,\r\n    activeResultDate: ''\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case STOCK_DATA_SET: {\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                dataStock: [...data]\r\n            }\r\n        }\r\n        case MARKET_DATA_SET: {\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                dataMarket: [...data]\r\n            }\r\n        }\r\n        case CALENDAR_DATA_SET: {\r\n            const { data } = action.payload\r\n            return {\r\n                ...state,\r\n                dataCalendar: [...data]\r\n            }\r\n        }\r\n        case IMPORT_DATA_ACTIVE_STEPPER_SET: {\r\n            const { index } = action.payload\r\n            return {\r\n                ...state,\r\n                activeStepper: index\r\n            }\r\n        }\r\n        case ACTIVE_RESULT_DATE_SET: {\r\n            const { date } = action.payload\r\n            return {\r\n                ...state,\r\n                activeResultDate: date\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    SELECTED_EVENT_DATE_SET,\r\n    TOT1_SET,\r\n    T1E_SET,\r\n    ET2_SET,\r\n    T2T3_SET,\r\n    DATE_FIELD_SET,\r\n    OPERATION_FIELD_SET\r\n} from '../actionTypes'\r\n\r\nconst initialState = {\r\n    selectedEventDate: '',\r\n    T0T1: 250,\r\n    T1E: 20,\r\n    ET2: 20,\r\n    T2T3: 50,\r\n    dateField: '',\r\n    operationField: ''\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SELECTED_EVENT_DATE_SET: {\r\n            const { date } = action.payload\r\n            return {\r\n                ...state,\r\n                selectedEventDate: date\r\n            }\r\n        }\r\n        case TOT1_SET: {\r\n            const { length } = action.payload\r\n            return {\r\n                ...state,\r\n                T0T1: length\r\n            }\r\n        }\r\n        case T1E_SET: {\r\n            const { length } = action.payload\r\n            return {\r\n                ...state,\r\n                T1E: length\r\n            }\r\n        }\r\n        case ET2_SET: {\r\n            const { length } = action.payload\r\n            return {\r\n                ...state,\r\n                ET2: length\r\n            }\r\n        }\r\n        case T2T3_SET: {\r\n            const { length } = action.payload\r\n            return {\r\n                ...state,\r\n                T2T3: length\r\n            }\r\n        }\r\n        case DATE_FIELD_SET: {\r\n            const { field } = action.payload\r\n            return {\r\n                ...state,\r\n                dateField: field\r\n            }\r\n        }\r\n        case OPERATION_FIELD_SET: {\r\n            const { field } = action.payload\r\n            return {\r\n                ...state,\r\n                operationField: field\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    SHOW_DATA_FIELDS_MODAL_SET\r\n} from '../actionTypes'\r\n\r\nconst initialState = {\r\n    showDataFieldModal: false\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SHOW_DATA_FIELDS_MODAL_SET: {\r\n            const { show } = action.payload\r\n            return {\r\n                ...state,\r\n                showDataFieldModal: show\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nimport userDataReducer from './userData.reducer'\r\nimport settingReducer from './setting.reducer'\r\nimport applicationReducer from './application.reducer'\r\n\r\nexport default combineReducers({ userDataReducer, settingReducer, applicationReducer })\r\n","import { createStore } from 'redux'\r\nimport rootReducer from './reducers'\r\n\r\nexport default createStore(rootReducer)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    rootElement)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}